[build-system]
requires = ["setuptools >= 61.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "virtual_ship"
description = "Code for the Virtual Ship Classroom, where Marine Scientists can combine Copernicus Marine Data with an OceanParcels ship to go on a virtual expedition."
readme = "README.md"
dynamic = ["version"]
authors = [{ name = "oceanparcels.org team" }]
requires-python = ">=3.8"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Education",
    "Intended Audience :: Education",
]
dependencies = [
    "parcels >= 3, < 4",
    "pyproj >= 3, < 4",
    "sortedcontainers == 2.4.0",
    "opensimplex == 0.4.5",
    "numpy >=1, < 2",
    "pydantic >=2, <3",
]

[project.urls]
homepage = "https://oceanparcels.org/"
repository = "https://github.com/OceanParcels/Virtual_ship_classroom"
tracker = "https://github.com/OceanParcels/Virtual_ship_classroom/issues"

[tool.setuptools]
packages = ["virtual_ship"]

[tool.setuptools_scm]
write_to = "virtual_ship/_version_setup.py"
local_scheme = "no-local-version"

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest == 8.2.0",
    "pytest-cov == 5.0.0",
    "codecov == 2.1.13",
    "seabird == 0.12.0",
    "setuptools == 70.0.0",
    "sortedcontainers-stubs == 2.4.2",
]

[project.scripts]
do_expedition = "virtual_ship.cli.do_expedition:main"


[tool.ruff.lint]
exclude = ["*.ipynb"]

select = [
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "D", # pydocstyle
    "DOC", # pydoclint
    # "B",  # Bugbear
    # "UP", # pyupgrade
    # "LOG", # logging
    # "ICN", # import conventions
    # "G", # logging-format
    "RUF", # ruff
    "ISC001", # single-line-implicit-string-concatenation
]
ignore = [
    # line too long (82 > 79 characters)
    "E501",
    # consider `[meta, header, *data]` instead of concatenation
    "RUF005",
    # multi-line-summary-first-line
    "D212",
    # one-blank-line-before-class
    "D203",

    # TODO: Remove later
    "D100", "D103"
]
